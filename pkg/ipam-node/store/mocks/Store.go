// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	store "github.com/Mellanox/nvidia-k8s-ipam/pkg/ipam-node/store"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Open provides a mock function with given fields: ctx
func (_m *Store) Open(ctx context.Context) (store.Session, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 store.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (store.Session, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) store.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Store_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) Open(ctx interface{}) *Store_Open_Call {
	return &Store_Open_Call{Call: _e.mock.On("Open", ctx)}
}

func (_c *Store_Open_Call) Run(run func(ctx context.Context)) *Store_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Store_Open_Call) Return(_a0 store.Session, _a1 error) *Store_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_Open_Call) RunAndReturn(run func(context.Context) (store.Session, error)) *Store_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
