// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	types "github.com/Mellanox/nvidia-k8s-ipam/pkg/ipam-node/types"

	types100 "github.com/containernetworking/cni/pkg/types/100"
)

// IPAllocator is an autogenerated mock type for the IPAllocator type
type IPAllocator struct {
	mock.Mock
}

type IPAllocator_Expecter struct {
	mock *mock.Mock
}

func (_m *IPAllocator) EXPECT() *IPAllocator_Expecter {
	return &IPAllocator_Expecter{mock: &_m.Mock}
}

// Allocate provides a mock function with given fields: id, ifName, meta, staticIP
func (_m *IPAllocator) Allocate(id string, ifName string, meta types.ReservationMetadata, staticIP net.IP) (*types100.IPConfig, error) {
	ret := _m.Called(id, ifName, meta, staticIP)

	var r0 *types100.IPConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, types.ReservationMetadata, net.IP) (*types100.IPConfig, error)); ok {
		return rf(id, ifName, meta, staticIP)
	}
	if rf, ok := ret.Get(0).(func(string, string, types.ReservationMetadata, net.IP) *types100.IPConfig); ok {
		r0 = rf(id, ifName, meta, staticIP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types100.IPConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, types.ReservationMetadata, net.IP) error); ok {
		r1 = rf(id, ifName, meta, staticIP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPAllocator_Allocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allocate'
type IPAllocator_Allocate_Call struct {
	*mock.Call
}

// Allocate is a helper method to define mock.On call
//   - id string
//   - ifName string
//   - meta types.ReservationMetadata
//   - staticIP net.IP
func (_e *IPAllocator_Expecter) Allocate(id interface{}, ifName interface{}, meta interface{}, staticIP interface{}) *IPAllocator_Allocate_Call {
	return &IPAllocator_Allocate_Call{Call: _e.mock.On("Allocate", id, ifName, meta, staticIP)}
}

func (_c *IPAllocator_Allocate_Call) Run(run func(id string, ifName string, meta types.ReservationMetadata, staticIP net.IP)) *IPAllocator_Allocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(types.ReservationMetadata), args[3].(net.IP))
	})
	return _c
}

func (_c *IPAllocator_Allocate_Call) Return(_a0 *types100.IPConfig, _a1 error) *IPAllocator_Allocate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPAllocator_Allocate_Call) RunAndReturn(run func(string, string, types.ReservationMetadata, net.IP) (*types100.IPConfig, error)) *IPAllocator_Allocate_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPAllocator creates a new instance of IPAllocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPAllocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPAllocator {
	mock := &IPAllocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
