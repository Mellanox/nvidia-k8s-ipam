// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/Mellanox/nvidia-k8s-ipam/api/grpc/nvidia/ipam/node/v1"
)

// GRPCClient is an autogenerated mock type for the GRPCClient type
type GRPCClient struct {
	mock.Mock
}

type GRPCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GRPCClient) EXPECT() *GRPCClient_Expecter {
	return &GRPCClient_Expecter{mock: &_m.Mock}
}

// Allocate provides a mock function with given fields: ctx, in, opts
func (_m *GRPCClient) Allocate(ctx context.Context, in *v1.AllocateRequest, opts ...grpc.CallOption) (*v1.AllocateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.AllocateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.AllocateRequest, ...grpc.CallOption) (*v1.AllocateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.AllocateRequest, ...grpc.CallOption) *v1.AllocateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AllocateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.AllocateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClient_Allocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allocate'
type GRPCClient_Allocate_Call struct {
	*mock.Call
}

// Allocate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.AllocateRequest
//   - opts ...grpc.CallOption
func (_e *GRPCClient_Expecter) Allocate(ctx interface{}, in interface{}, opts ...interface{}) *GRPCClient_Allocate_Call {
	return &GRPCClient_Allocate_Call{Call: _e.mock.On("Allocate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GRPCClient_Allocate_Call) Run(run func(ctx context.Context, in *v1.AllocateRequest, opts ...grpc.CallOption)) *GRPCClient_Allocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.AllocateRequest), variadicArgs...)
	})
	return _c
}

func (_c *GRPCClient_Allocate_Call) Return(_a0 *v1.AllocateResponse, _a1 error) *GRPCClient_Allocate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GRPCClient_Allocate_Call) RunAndReturn(run func(context.Context, *v1.AllocateRequest, ...grpc.CallOption) (*v1.AllocateResponse, error)) *GRPCClient_Allocate_Call {
	_c.Call.Return(run)
	return _c
}

// Deallocate provides a mock function with given fields: ctx, in, opts
func (_m *GRPCClient) Deallocate(ctx context.Context, in *v1.DeallocateRequest, opts ...grpc.CallOption) (*v1.DeallocateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.DeallocateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeallocateRequest, ...grpc.CallOption) (*v1.DeallocateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeallocateRequest, ...grpc.CallOption) *v1.DeallocateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeallocateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeallocateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClient_Deallocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deallocate'
type GRPCClient_Deallocate_Call struct {
	*mock.Call
}

// Deallocate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.DeallocateRequest
//   - opts ...grpc.CallOption
func (_e *GRPCClient_Expecter) Deallocate(ctx interface{}, in interface{}, opts ...interface{}) *GRPCClient_Deallocate_Call {
	return &GRPCClient_Deallocate_Call{Call: _e.mock.On("Deallocate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GRPCClient_Deallocate_Call) Run(run func(ctx context.Context, in *v1.DeallocateRequest, opts ...grpc.CallOption)) *GRPCClient_Deallocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.DeallocateRequest), variadicArgs...)
	})
	return _c
}

func (_c *GRPCClient_Deallocate_Call) Return(_a0 *v1.DeallocateResponse, _a1 error) *GRPCClient_Deallocate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GRPCClient_Deallocate_Call) RunAndReturn(run func(context.Context, *v1.DeallocateRequest, ...grpc.CallOption) (*v1.DeallocateResponse, error)) *GRPCClient_Deallocate_Call {
	_c.Call.Return(run)
	return _c
}

// IsAllocated provides a mock function with given fields: ctx, in, opts
func (_m *GRPCClient) IsAllocated(ctx context.Context, in *v1.IsAllocatedRequest, opts ...grpc.CallOption) (*v1.IsAllocatedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.IsAllocatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.IsAllocatedRequest, ...grpc.CallOption) (*v1.IsAllocatedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.IsAllocatedRequest, ...grpc.CallOption) *v1.IsAllocatedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.IsAllocatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.IsAllocatedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClient_IsAllocated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllocated'
type GRPCClient_IsAllocated_Call struct {
	*mock.Call
}

// IsAllocated is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.IsAllocatedRequest
//   - opts ...grpc.CallOption
func (_e *GRPCClient_Expecter) IsAllocated(ctx interface{}, in interface{}, opts ...interface{}) *GRPCClient_IsAllocated_Call {
	return &GRPCClient_IsAllocated_Call{Call: _e.mock.On("IsAllocated",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GRPCClient_IsAllocated_Call) Run(run func(ctx context.Context, in *v1.IsAllocatedRequest, opts ...grpc.CallOption)) *GRPCClient_IsAllocated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.IsAllocatedRequest), variadicArgs...)
	})
	return _c
}

func (_c *GRPCClient_IsAllocated_Call) Return(_a0 *v1.IsAllocatedResponse, _a1 error) *GRPCClient_IsAllocated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GRPCClient_IsAllocated_Call) RunAndReturn(run func(context.Context, *v1.IsAllocatedRequest, ...grpc.CallOption) (*v1.IsAllocatedResponse, error)) *GRPCClient_IsAllocated_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGRPCClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGRPCClient creates a new instance of GRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGRPCClient(t mockConstructorTestingTNewGRPCClient) *GRPCClient {
	mock := &GRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
