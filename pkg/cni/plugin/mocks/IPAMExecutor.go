// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/containernetworking/cni/pkg/types"
)

// IPAMExecutor is an autogenerated mock type for the IPAMExecutor type
type IPAMExecutor struct {
	mock.Mock
}

type IPAMExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *IPAMExecutor) EXPECT() *IPAMExecutor_Expecter {
	return &IPAMExecutor_Expecter{mock: &_m.Mock}
}

// ExecAdd provides a mock function with given fields: pluginName, data
func (_m *IPAMExecutor) ExecAdd(pluginName string, data []byte) (types.Result, error) {
	ret := _m.Called(pluginName, data)

	var r0 types.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (types.Result, error)); ok {
		return rf(pluginName, data)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) types.Result); ok {
		r0 = rf(pluginName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(pluginName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPAMExecutor_ExecAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecAdd'
type IPAMExecutor_ExecAdd_Call struct {
	*mock.Call
}

// ExecAdd is a helper method to define mock.On call
//   - pluginName string
//   - data []byte
func (_e *IPAMExecutor_Expecter) ExecAdd(pluginName interface{}, data interface{}) *IPAMExecutor_ExecAdd_Call {
	return &IPAMExecutor_ExecAdd_Call{Call: _e.mock.On("ExecAdd", pluginName, data)}
}

func (_c *IPAMExecutor_ExecAdd_Call) Run(run func(pluginName string, data []byte)) *IPAMExecutor_ExecAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *IPAMExecutor_ExecAdd_Call) Return(_a0 types.Result, _a1 error) *IPAMExecutor_ExecAdd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPAMExecutor_ExecAdd_Call) RunAndReturn(run func(string, []byte) (types.Result, error)) *IPAMExecutor_ExecAdd_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCheck provides a mock function with given fields: pluginName, data
func (_m *IPAMExecutor) ExecCheck(pluginName string, data []byte) error {
	ret := _m.Called(pluginName, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(pluginName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPAMExecutor_ExecCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCheck'
type IPAMExecutor_ExecCheck_Call struct {
	*mock.Call
}

// ExecCheck is a helper method to define mock.On call
//   - pluginName string
//   - data []byte
func (_e *IPAMExecutor_Expecter) ExecCheck(pluginName interface{}, data interface{}) *IPAMExecutor_ExecCheck_Call {
	return &IPAMExecutor_ExecCheck_Call{Call: _e.mock.On("ExecCheck", pluginName, data)}
}

func (_c *IPAMExecutor_ExecCheck_Call) Run(run func(pluginName string, data []byte)) *IPAMExecutor_ExecCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *IPAMExecutor_ExecCheck_Call) Return(_a0 error) *IPAMExecutor_ExecCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPAMExecutor_ExecCheck_Call) RunAndReturn(run func(string, []byte) error) *IPAMExecutor_ExecCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ExecDel provides a mock function with given fields: pluginName, data
func (_m *IPAMExecutor) ExecDel(pluginName string, data []byte) error {
	ret := _m.Called(pluginName, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(pluginName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPAMExecutor_ExecDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecDel'
type IPAMExecutor_ExecDel_Call struct {
	*mock.Call
}

// ExecDel is a helper method to define mock.On call
//   - pluginName string
//   - data []byte
func (_e *IPAMExecutor_Expecter) ExecDel(pluginName interface{}, data interface{}) *IPAMExecutor_ExecDel_Call {
	return &IPAMExecutor_ExecDel_Call{Call: _e.mock.On("ExecDel", pluginName, data)}
}

func (_c *IPAMExecutor_ExecDel_Call) Run(run func(pluginName string, data []byte)) *IPAMExecutor_ExecDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *IPAMExecutor_ExecDel_Call) Return(_a0 error) *IPAMExecutor_ExecDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPAMExecutor_ExecDel_Call) RunAndReturn(run func(string, []byte) error) *IPAMExecutor_ExecDel_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPAMExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPAMExecutor creates a new instance of IPAMExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPAMExecutor(t mockConstructorTestingTNewIPAMExecutor) *IPAMExecutor {
	mock := &IPAMExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
