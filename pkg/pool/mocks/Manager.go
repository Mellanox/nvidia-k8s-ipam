// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	pool "github.com/Mellanox/nvidia-k8s-ipam/pkg/pool"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// GetPoolByKey provides a mock function with given fields: key
func (_m *Manager) GetPoolByKey(key string) *pool.Pool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetPoolByKey")
	}

	var r0 *pool.Pool
	if rf, ok := ret.Get(0).(func(string) *pool.Pool); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pool.Pool)
		}
	}

	return r0
}

// Manager_GetPoolByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoolByKey'
type Manager_GetPoolByKey_Call struct {
	*mock.Call
}

// GetPoolByKey is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) GetPoolByKey(key interface{}) *Manager_GetPoolByKey_Call {
	return &Manager_GetPoolByKey_Call{Call: _e.mock.On("GetPoolByKey", key)}
}

func (_c *Manager_GetPoolByKey_Call) Run(run func(key string)) *Manager_GetPoolByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_GetPoolByKey_Call) Return(_a0 *pool.Pool) *Manager_GetPoolByKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetPoolByKey_Call) RunAndReturn(run func(string) *pool.Pool) *Manager_GetPoolByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetPools provides a mock function with given fields:
func (_m *Manager) GetPools() map[string]*pool.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPools")
	}

	var r0 map[string]*pool.Pool
	if rf, ok := ret.Get(0).(func() map[string]*pool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pool.Pool)
		}
	}

	return r0
}

// Manager_GetPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPools'
type Manager_GetPools_Call struct {
	*mock.Call
}

// GetPools is a helper method to define mock.On call
func (_e *Manager_Expecter) GetPools() *Manager_GetPools_Call {
	return &Manager_GetPools_Call{Call: _e.mock.On("GetPools")}
}

func (_c *Manager_GetPools_Call) Run(run func()) *Manager_GetPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_GetPools_Call) Return(_a0 map[string]*pool.Pool) *Manager_GetPools_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_GetPools_Call) RunAndReturn(run func() map[string]*pool.Pool) *Manager_GetPools_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePool provides a mock function with given fields: key
func (_m *Manager) RemovePool(key string) {
	_m.Called(key)
}

// Manager_RemovePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePool'
type Manager_RemovePool_Call struct {
	*mock.Call
}

// RemovePool is a helper method to define mock.On call
//   - key string
func (_e *Manager_Expecter) RemovePool(key interface{}) *Manager_RemovePool_Call {
	return &Manager_RemovePool_Call{Call: _e.mock.On("RemovePool", key)}
}

func (_c *Manager_RemovePool_Call) Run(run func(key string)) *Manager_RemovePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Manager_RemovePool_Call) Return() *Manager_RemovePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_RemovePool_Call) RunAndReturn(run func(string)) *Manager_RemovePool_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePool provides a mock function with given fields: key, _a1
func (_m *Manager) UpdatePool(key string, _a1 *pool.Pool) {
	_m.Called(key, _a1)
}

// Manager_UpdatePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePool'
type Manager_UpdatePool_Call struct {
	*mock.Call
}

// UpdatePool is a helper method to define mock.On call
//   - key string
//   - _a1 *pool.Pool
func (_e *Manager_Expecter) UpdatePool(key interface{}, _a1 interface{}) *Manager_UpdatePool_Call {
	return &Manager_UpdatePool_Call{Call: _e.mock.On("UpdatePool", key, _a1)}
}

func (_c *Manager_UpdatePool_Call) Run(run func(key string, _a1 *pool.Pool)) *Manager_UpdatePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*pool.Pool))
	})
	return _c
}

func (_c *Manager_UpdatePool_Call) Return() *Manager_UpdatePool_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_UpdatePool_Call) RunAndReturn(run func(string, *pool.Pool)) *Manager_UpdatePool_Call {
	_c.Call.Return(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
